{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=TRUE)
edges <- E(motifgraph)
plot(motifgraph)
text(-1,-1,paste("Motif",i-1,"occurs",motif,"times."))
print(paste("This motif(",i-1, ") occurs ",motif," times:"),sep="")
#cat(edges)
}
}
Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=TRUE)
edges <- E(motifgraph)
plot(motifgraph)
text(-1,-1,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=TRUE)
edges <- E(motifgraph)
plot(motifgraph)
text(-0.5,-1,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=TRUE)
edges <- E(motifgraph)
plot(motifgraph)
text(-0.5,-1.2,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
mygraphmotifs
GetMotifsFromGraph = function(graph.name, motifsize = 4){
graph = get(graph.name)
# Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=TRUE)
edges <- E(motifgraph)
plot(motifgraph)
text(-0.5,-1.2,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
print(mygraphmotifs)
}
GetMotifsFromGraph("graph.Bayes")
mygraphmotifs.
mygraphmotifs
is.na(mygraphmotifs)
mygraphmotifs[is.na(mygraphmotifs)]=0
mygraphmotifs
hist(mygraphmotifs)
plot(mygraphmotifs)
graph
plot(graph)
adjacent_vertices(graph, 3, mode = c("out", "in", "all", "total"))
adjacent_vertices(graph, 4, mode = c("out", "in", "all", "total"))
adjacent_vertices(graph, 4, mode = "all")
adjacent_vertices(graph, 1, mode = "all")
adjacent_vertices(graph, 2, mode = "all")
adjacent_vertices(graph, mode = "all")
adjacent_vertices(graph, mode = "total")
adjacent_vertices(graph,1, mode = "total")
adjacent_vertices(graph,2, mode = "total")
adjacent_vertices(graph,3, mode = "total")
adjacent_vertices(graph,4, mode = "total")
adjacent_vertices(graph,5, mode = "total")
adjacent_vertices(graph,6, mode = "total")
degree(g)
degree(graph)
degree(graph)==0
graph[degree(graph)==0]
graph[degree(graph)==0,]
graph[,degree(graph)==0]
graph[[,degree(graph)==0]]
graph[[,!degree(graph)==0]]
plot(graph[[,!degree(graph)==0]])
plot(graph[,!degree(graph)==0])
delete.vertices(graph, degree(graph)==0)
plot(delete.vertices(graph, degree(graph)==0))
graph = delete.vertices(graph, degree(graph)==0)
graph
degree(graph)
mean(degree(graph))
graph
degree(graph,mode = "in")
meanInDegree = mean(degree(graph,mode = "in"))
meanOutDegree = mean(degree(graph,mode = "out"))
meanInDegree
meanOutDegree
mean(degree(graph,mode = "in"))
mean(degree(graph,mode = "out"))
degree(graph,mode = "out")
degree(graph,mode = "in")
graph
V(graph)
length(V(graph))
graph.motifs(graph, motifsize)
ks.test(mygraphmotifs,randomNetMotifs)
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(graph, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
directed =T
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(graph, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
ks.test(mygraphmotifs,randomNetMotifs)
randomNetMotifs
sigma(randomNetMotifs)
stderr()
randomNetMotifs>=1
randomNetMotifs[randomNetMotifs>=1]
mean(randomNetMotifs[randomNetMotifs>=1])
median(randomNetMotifs[randomNetMotifs>=1])
randomdist = randomNetMotifs[randomNetMotifs>=1]
randomdist
t.test(mygraphmotifs,randomNetMotifs)
mygraphmotifs[is.na(mygraphmotifs)]=0
plot(mygraphmotifs) # distribution
actualdist = mygraphmotifs[mygraphmotifs>=1]
# start statistical testing
graph = delete.vertices(graph, degree(graph)==0)
meanInDegree = mean(degree(graph,mode = "in"))
meanOutDegree = mean(degree(graph,mode = "out"))
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(graph, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
randomdist = randomNetMotifs[randomNetMotifs>=1]
median(randomNetMotifs[randomNetMotifs>=1])
t.test(actualdist,randomdist)
actualdist
randomdist
mygraphmotifs
randomNetMotifs
graph.name
graph = get(graph.name)
# Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=directed)
edges <- E(motifgraph)
plot(motifgraph)
text(-0.5,-1.2,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
print(mygraphmotifs)
mygraphmotifs[is.na(mygraphmotifs)]=0
plot(mygraphmotifs) # distribution
actualdist = mygraphmotifs[mygraphmotifs>=1]
# start statistical testing
graph = delete.vertices(graph, degree(graph)==0)
meanInDegree = mean(degree(graph,mode = "in"))
meanOutDegree = mean(degree(graph,mode = "out"))
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(graph, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
randomdist = randomNetMotifs[randomNetMotifs>=1]
median(randomNetMotifs[randomNetMotifs>=1])
t.test(actualdist,randomdist)
mygraphmotifs
randomNetMotifs
graph = get(graph.name)
# Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=directed)
edges <- E(motifgraph)
plot(motifgraph)
text(-0.5,-1.2,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
print(mygraphmotifs)
mygraphmotifs[is.na(mygraphmotifs)]=0
plot(mygraphmotifs) # distribution
actualdist = mygraphmotifs[mygraphmotifs>=1]
# start statistical testing
graph = delete.vertices(graph, degree(graph)==0)
meanInDegree = mean(degree(graph,mode = "in"))
meanOutDegree = mean(degree(graph,mode = "out"))
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(g, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
randomdist = randomNetMotifs[randomNetMotifs>=1]
median(randomNetMotifs[randomNetMotifs>=1])
t.test(actualdist,randomdist)
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(g, motifsize)
randomNetMotifs
randomNetMotifs[is.na(randomNetMotifs)]=0
randomNetMotifs
randomNetMotifs
randomNetMotifsTotal
exists(randomNetMotifsTotal)
exists("randomNetMotifsTotal")
for(p in 1:10){
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(g, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
if(!exists("randomNetMotifsTotal")){
randomNetMotifsTotal = randomNetMotifs
}else{
randomNetMotifsTotal = randomNetMotifsTotal + randomNetMotifs
}
}
randomNetMotifsTotal
# start random net generation; create distribution
for(p in 1:100){
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(g, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
if(!exists("randomNetMotifsTotal")){
randomNetMotifsTotal = randomNetMotifs
}else{
randomNetMotifsTotal = randomNetMotifsTotal + randomNetMotifs
}
}
randomNetMotifsTotal
randomNetMotifsTotal/100
amountRandomNets = 1000
# start random net generation; create distribution
for(p in 1:amountRandomNets){
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(g, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
if(!exists("randomNetMotifsTotal")){
randomNetMotifsTotal = randomNetMotifs
}else{
randomNetMotifsTotal = randomNetMotifsTotal + randomNetMotifs
}
}
randomNetMotifsTotal = randomNetMotifsTotal/amountRandomNets
randomNetMotifsTotal
mygraphmotifs
mygraphmotifs>>randomNetMotifsTotal
mygraphmotifs>=randomNetMotifsTotal
mygraphmotifs>=randomNetMotifsTotal-1
mygraphmotifs>=randomNetMotifsTotal+q
mygraphmotifs>=randomNetMotifsTotal+1
impMotifIndex = mygraphmotifs>=randomNetMotifsTotal+1
impMotifIndex
as.numeric(impMotifIndex)
which(impMotifIndex)
which(mygraphmotifs>=randomNetMotifsTotal+1)
mygraphmotifs
which(mygraphmotifs>=(randomNetMotifsTotal+1)^1.32)
which(mygraphmotifs>=(randomNetMotifsTotal+1)^2)
(randomNetMotifsTotal+1)^2
(randomNetMotifsTotal+1)
which(mygraphmotifs>(randomNetMotifsTotal))
mygraphmotifs>(randomNetMotifsTotal)
print(impMotifIndex)
GetMotifsFromGraph = function(graph.name, motifsize = 4, directed=TRUE, amountRandomNets = 1000){
graph = get(graph.name)
# Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=directed)
edges <- E(motifgraph)
plot(motifgraph)
text(-0.5,-1.2,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
print(mygraphmotifs)
mygraphmotifs[is.na(mygraphmotifs)]=0
plot(mygraphmotifs) # distribution
actualdist = mygraphmotifs[mygraphmotifs>=1]
# start statistical testing
graph = delete.vertices(graph, degree(graph)==0)
meanInDegree = mean(degree(graph,mode = "in"))
meanOutDegree = mean(degree(graph,mode = "out"))
# start random net generation; create distribution
for(p in 1:amountRandomNets){
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(g, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
if(!exists("randomNetMotifsTotal")){
randomNetMotifsTotal = randomNetMotifs
}else{
randomNetMotifsTotal = randomNetMotifsTotal + randomNetMotifs
}
}
randomNetMotifsTotal = randomNetMotifsTotal/amountRandomNets
# Which occured more than random:
impMotifIndex = which(mygraphmotifs>(randomNetMotifsTotal))
print(impMotifIndex)
}
GetMotifsFromGraph("graph.Cor",motifsize = 3)
GetMotifsFromGraph("graph.Cor",motifsize = 4)
print(impMotifIndex-1)
impMotifIndex-1
impMotifIndex
which(mygraphmotifs>(randomNetMotifsTotal))
which(mygraphmotifs>(randomNetMotifsTotal))-1
# Get motifs fromgraph and plot the motifs with frequency
GetMotifsFromGraph = function(graph.name, motifsize = 4, directed=TRUE, amountRandomNets = 1000){
graph = get(graph.name)
# Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=directed)
edges <- E(motifgraph)
plot(motifgraph)
text(-0.5,-1.2,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
print(mygraphmotifs)
mygraphmotifs[is.na(mygraphmotifs)]=0
plot(mygraphmotifs) # distribution
actualdist = mygraphmotifs[mygraphmotifs>=1]
# start statistical testing
graph = delete.vertices(graph, degree(graph)==0)
meanInDegree = mean(degree(graph,mode = "in"))
meanOutDegree = mean(degree(graph,mode = "out"))
# start random net generation; create distribution
for(p in 1:amountRandomNets){
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(g, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
if(!exists("randomNetMotifsTotal")){
randomNetMotifsTotal = randomNetMotifs
}else{
randomNetMotifsTotal = randomNetMotifsTotal + randomNetMotifs
}
}
randomNetMotifsTotal = randomNetMotifsTotal/amountRandomNets
# Which occured more than random:
impMotifIndex = which(mygraphmotifs>(randomNetMotifsTotal))-1
print(impMotifIndex)
}
GetMotifsFromGraph("graph.Cor",motifsize = 4)
GetMotifsFromGraph("graph.Cor",motifsize = 3)
motifsize=3
graph = get(graph.name)
# Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=directed)
edges <- E(motifgraph)
plot(motifgraph)
text(-0.5,-1.2,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
print(mygraphmotifs)
print(mygraphmotifs)
mygraphmotifs[is.na(mygraphmotifs)]=0
delete.vertices(graph, degree(graph)==0)
graph = delete.vertices(graph, degree(graph)==0)
meanInDegree = mean(degree(graph,mode = "in"))
meanOutDegree = mean(degree(graph,mode = "out"))
amountRandomNets
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(g, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
if(exists("randomNetMotifsTotal")){rm(randomNetMotifsTotal)}
randomNetMotifsTotal
# Get motifs fromgraph and plot the motifs with frequency
GetMotifsFromGraph = function(graph.name, motifsize = 4, directed=TRUE, amountRandomNets = 1000){
graph = get(graph.name)
if(exists("randomNetMotifsTotal")){rm(randomNetMotifsTotal)}
# Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=directed)
edges <- E(motifgraph)
plot(motifgraph)
text(-0.5,-1.2,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
print(mygraphmotifs)
mygraphmotifs[is.na(mygraphmotifs)]=0
# start statistical testing
graph = delete.vertices(graph, degree(graph)==0)
meanInDegree = mean(degree(graph,mode = "in"))
meanOutDegree = mean(degree(graph,mode = "out"))
# start random net generation; create distribution
for(p in 1:amountRandomNets){
g <- barabasi.game(n=length(V(graph)),directed = directed)
randomNetMotifs = graph.motifs(g, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
if(!exists("randomNetMotifsTotal")){
randomNetMotifsTotal = randomNetMotifs
}else{
randomNetMotifsTotal = randomNetMotifsTotal + randomNetMotifs
}
}
randomNetMotifsTotal = randomNetMotifsTotal/amountRandomNets
# Which occured more than random:
impMotifIndex = which(mygraphmotifs>(randomNetMotifsTotal))-1
print(impMotifIndex)
}
GetMotifsFromGraph("graph.Cor",motifsize = 3)
GetMotifsFromGraph("graph.Cor",motifsize = 4)
count_motifs(graph, size = 3, cut.prob = rep(0, size))
count_motifs(graph, size = 3)
plot(graph.Cor)
graph.motifs
?graph.motifs
graph.motifs(graph, motifsize)
g <- barabasi.game(n=5,directed = T)
#erdos.renyi.game # randomn
plot(g)
motifs(g, motifsize)
motifsize
g <- barabasi.game(n=4,directed = T)
#erdos.renyi.game # randomn
plot(g)
motifs(g, motifsize)
