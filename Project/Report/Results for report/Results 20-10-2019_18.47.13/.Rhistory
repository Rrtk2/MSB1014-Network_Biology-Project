# Remove NAs n stuff
dfSmilesDescData <- dfSmilesDescData[, !apply(dfSmilesDescData, 2, function(x) any(is.na(x)) )]
dfSmilesDescData <- dfSmilesDescData[, !apply( dfSmilesDescData, 2, function(x) length(unique(x)) == 1 )]
if(T){
# Correlate the descriptors with the boiling point; if these are linked, they should add some info
corMatrix = cor(dfSmilesDescData , queryResults$bp)
corMatrix = as.data.frame(corMatrix[order(abs(corMatrix),decreasing = T),])
# select first 15 components:
componentNames = rownames(corMatrix)[1:15]
dfSmilesDescData = dfSmilesDescData[,match(colnames(dfSmilesDescData), x = componentNames)]
}
# - BLOCKED - Old method, keepin this inside for further reference
if(F){
dfSmilesDescData = mydataBACKUP
dfSmilesDescData = dfSmilesDescData[,-1]
# crude way to extract 'important' features based on correlation
dfSmilesDescData <- dfSmilesDescData[, !apply(dfSmilesDescData, 2, function(x) any(is.na(x)) )]
dfSmilesDescData <- dfSmilesDescData[, !apply( dfSmilesDescData, 2, function(x) length(unique(x)) == 1 )]
r2 <- which(cor(dfSmilesDescData)^2 > .9, arr.ind=TRUE) # when keeping this high, the prediction improves
r2 <- r2[ r2[,1] > r2[,2] , ]
dfSmilesDescData <- dfSmilesDescData[, -unique(r2[,2])]
}
# - BLOCKED -
# should contain nAtomLAC; the amount of c atoms
if(!exists("dfSmilesDescData$nAtomLAC")){
dfSmilesDescData = cbind(dfSmilesDescData, dfSmilesDescData$nAtomLAC)
names(dfSmilesDescData)[dim(dfSmilesDescData)[2]] = "n"
}else{
names(dfSmilesDescData)[names(dfSmilesDescData)=="dfSmilesDescData$nAtomLAC"] = "n"
}
# Store resulting input file in dfInputML; as it is the input for ML
dfInputML = dfSmilesDescData
# Finish prepare data
# Add and define the 'to be predicted' column
indexBoilPoint = ncol(dfInputML)+1
dfInputML[,indexBoilPoint] = queryResults$bp
names(dfInputML)[indexBoilPoint] = 'BoilPoint'
# Ordered data is required later
dfInputML = dfInputML[order(dfInputML$BoilPoint),]
#-----------------------------------------------------------------------------------------------------#
#							MACHINE LEARNING
#-----------------------------------------------------------------------------------------------------#
#-----------------------------------------------------------------------------------------------------#
# 				Data subsetting; Train; Test
#-----------------------------------------------------------------------------------------------------#
# Define variables
sample.length = length(dfInputML[,1])
# Higher probability to select lower (underrepresented) samples;
# improves range of model, increases fit and prediction power.
# Ranges from 1 (select) to 0.5 (chance)
sample.biasprob = 1 - 1:sample.length /max(sample.length )/2
# Make data objects
samples.upper = sample(sample.length , floor(length(dfInputML[,1])*trainingTestRatio),prob = sample.biasprob ) #get all unique samples (not frequecies) and sample 80%
#plot(samples.upper[order(samples.upper)])
samples.total = (1:length(dfInputML[,1])) # all unique samples (not frequecies)
samples.lowerl = samples.total[!samples.total %in% samples.upper]  #which samples are sampled
# Subset data
data.train = dfInputML[samples.upper,]#contains all upper
data.train = as.data.frame(data.train)
data.test = dfInputML[samples.lowerl,]#contains all lower
data.test = as.data.frame(data.test)
# Remove nas
data.train=data.train[!is.na(data.train[,1]),]
data.test=data.test[!is.na(data.test[,1]),]
# Create standardized object
xNN = data.train[,-(indexBoilPoint)]
yNN = data.train[,indexBoilPoint]
dat = data.frame(xNN, y = yNN)
# Remove samples with in datasets n < 1
data.train = dat[dat$n>0,]
yactual.train = data.train$y
data.test = data.test[data.test$n>0,]
yactual.test = data.test$BoilPoint
#-----------------------------------------------------------------------------------------------------#
#							CARET : pls
#-----------------------------------------------------------------------------------------------------#
# Define training control method; 10 - k - cross validation
train_control <- trainControl(method="cv", number=10)
# Train the model
model <- train(y~., data=data.train, trControl=train_control, method="pls")
# Find out what model is best
print(model)
# Find out most important variables
Varimportance = varImp(model)
cat(paste("Best model fit with", model$bestTune, "latent components \n"))
cat(paste("Latent components:",paste(rownames(Varimportance$importance)[order(decreasing = T,Varimportance$importance$Overall)][1:model$bestTune[1,]],collapse = ", "),"\n"))
plot(Varimportance, main="Varible importance in PLS model \n")
# Predict test set
ypredCARET.pls.test <- model %>% predict(data.test)
# Root mean squared error
RMSE.pls.test = RMSE(yactual.test, ypredCARET.pls.test)
RMSE.pls.test
# Results in: 16.09
# Mean absolute error
MAE.pls.test = MAE(yactual.test, ypredCARET.pls.test)
MAE.pls.test
# Results in: 14.97
# Plot ypred vs yactual of test data
plot(yactual.test, ypredCARET.pls.test,
xlab="Observed BP test set", ylab="Predicted BP test set",
pch=19, xlim=c(0, ceiling(max(yNN)*1.1)), ylim=c(0, ceiling(max(yNN)*1.1)),main="Prediction error test set (PLS model)")
abline(0,1, col='red')
text(200,ceiling(max(yNN)*1.1),paste("RMSE: ",RMSE.pls.test))
text(200,ceiling(max(yNN)*1.1)-50,paste("MAE: ",MAE.pls.test))
# Predict training data; check overfitting
ypredCARET.pls.train <- model %>% predict(data.train)
# Root mean squared error
RMSE.pls.train = RMSE(yactual.train, ypredCARET.pls.train)
RMSE.pls.train
# Results in: 19.94
# Mean absolute error
MAE.pls.train = MAE(yactual.train, ypredCARET.pls.train)
MAE.pls.train
# Results in: 14.84
# Plot ypred vs yactual of training data
plot(yactual.train, ypredCARET.pls.train,
xlab="Observed BP train set", ylab="Predicted BP train set",
pch=19, xlim=c(0, ceiling(max(yNN)*1.1)), ylim=c(0, ceiling(max(yNN)*1.1)),main="Prediction error training set (PLS model)")
abline(0,1, col='red')
text(200,ceiling(max(yNN)*1.1),paste("RMSE: ",RMSE.pls.train))
text(200,ceiling(max(yNN)*1.1)-50,paste("MAE: ",MAE.pls.train))
#-----------------------------------------------------------------------------------------------------#
#							CARET : RF
#-----------------------------------------------------------------------------------------------------#
# Define training control method; 10 - k - cross validation
train_control <- trainControl(method="cv", number=10)
# Train the model
model <- train(y~., data=data.train, trControl=train_control, method="rf")
# Find out what model is best
print(model)
# Find out most important variables - BLOCKED - this doesnt work for rf
if(F){
Varimportance = varImp(model)
cat(paste("Best model fit with", model$bestTune, "latent components \n"))
cat(paste("Latent components:",paste(rownames(Varimportance$importance)[order(decreasing = T,Varimportance$importance$Overall)][1:model$bestTune[1,]],collapse = ", "),"\n"))
plot(Varimportance, main="Varible importance in rf model \n")
}
# Predict test set
ypredCARET.rf.test <- model %>% predict(data.test)
# Root mean squared error
RMSE.rf.test = RMSE(yactual.test, ypredCARET.rf.test)
RMSE.rf.test
# Results in: 8.19
# Mean absolute error
MAE.rf.test = MAE(yactual.test, ypredCARET.rf.test)
MAE.rf.test
# Results in: 5.35
# Plot ypred vs yactual of test data
plot(yactual.test, ypredCARET.rf.test,
xlab="Observed BP test set", ylab="Predicted BP test set",
pch=19, xlim=c(0, ceiling(max(yNN)*1.1)), ylim=c(0, ceiling(max(yNN)*1.1)),main="Prediction error test set (RandomForest model)")
abline(0,1, col='red')
text(200,ceiling(max(yNN)*1.1),paste("RMSE: ",RMSE.rf.test))
text(200,ceiling(max(yNN)*1.1)-50,paste("MAE: ",MAE.rf.test))
# Predict training data; check overfitting
ypredCARET.rf.train <- model %>% predict(data.train)
# Root mean squared error
RMSE.rf.train = RMSE(yactual.train, ypredCARET.rf.train)
RMSE.rf.train
# Results in: 7.65
# Mean absolute error
MAE.rf.train = MAE(yactual.train, ypredCARET.rf.train)
MAE.rf.train
# Results in: 3.78
# Plot ypred vs yactual of training data
plot(yactual.train, ypredCARET.rf.train,
xlab="Observed BP train set", ylab="Predicted BP train set",
pch=19, xlim=c(0, ceiling(max(yNN)*1.1)), ylim=c(0, ceiling(max(yNN)*1.1)),main="Prediction error training set (RandomForest model)")
abline(0,1, col='red')
text(200,ceiling(max(yNN)*1.1),paste("RMSE: ",RMSE.rf.train))
text(200,ceiling(max(yNN)*1.1)-50,paste("MAE: ",MAE.rf.train))
motifsize = 4
g <- barabasi.game(n=15,directed = T)
#erdos.renyi.game # randomn
plot(g)
motifs(g, motifsize)
which(motifs(g, motifsize)>=1)
# create the motif MINUS ONE BECAUSE THESE FACKERS START AT 0; THIS IS R NOT FUCKING C++
#plot(graph.isocreate(size=3, number=3-1,directed = T))
graph = g
# Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=TRUE)
edges <- E(motifgraph)
plot(motifgraph)
text(-1,-1,paste("This motif occurs",motif,"times."))
print(paste("This motif occurs",motif,"times:"))
print(edges)
}
}
library(igraph)
motifsize = 4
g <- barabasi.game(n=15,directed = T)
#erdos.renyi.game # randomn
plot(g)
motifs(g, motifsize)
which(motifs(g, motifsize)>=1)
# create the motif MINUS ONE BECAUSE THESE FACKERS START AT 0; THIS IS R NOT FUCKING C++
#plot(graph.isocreate(size=3, number=3-1,directed = T))
graph = g
# Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs))
{
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0) # There are some occurrences of this motif
{
print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=TRUE)
edges <- E(motifgraph)
plot(motifgraph)
text(-1,-1,paste("This motif occurs",motif,"times."))
print(paste("This motif occurs",motif,"times:"))
print(edges)
}
}
motifs(g, motifsize)
plot(graph.isocreate(size=3, number=3-1,directed = T))
plot(graph.isocreate(size=3, number=4,directed = T))
plot(graph.isocreate(size=4, number=4,directed = T))
plot(graph.isocreate(size=4, number=3,directed = T))
version()
version
sample_gnp(n = length(V(graph)),p.or.m =length(V(graph)),directed = T,type = "gnm")
#-----------------------------------------------------------------------------------------------------#
#		Block 01		(Install &) Load packages
#-----------------------------------------------------------------------------------------------------#
# Install packages if needed and load, or just load packages
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager", ask = F)
# Insert all packages in requiredpackages
requiredpackages <-
c("GRENITS",
"igraph",
"corrr",
"GENIE3",
"parmigene",
"RCy3")
for (i in requiredpackages) {
if (!requireNamespace(i, quietly = TRUE))
BiocManager::install(i, ask = F, dependencies = TRUE)
require(as.character(i), character.only = TRUE)
print(i)
}
sample_gnp(n = length(V(graph)),p.or.m =length(V(graph)),directed = T,type = "gnm")
sample_gnp(n = length(V(graph)),p.or.m =length(V(graph)),directed = T)
sample_gnp(n = length(V(graph)),p =length(V(graph)),directed = T)
sample_gnp(n = length(V(graph)),p =length(V(graph)),directed = T)
sample_gnp(n = 20,p =length(V(graph)),directed = T)
sample_gnp(n = 20,p =20,directed = T)
citation(GENIE3’)
citation("GENIE3")
citation("parmigene")
citation("RCy3")
#-----------------------------------------------------------------------------------------------------#
#		Block 00		GENERAL INFORMATION
#-----------------------------------------------------------------------------------------------------#
# Copyright statement comment:
#   All rights reserved.
#
# Author comment:
#   Rick Reijnders
#   Script version: 11-10-2019
# File description:
#	Name
#	  Mainscript.R
#
rm(list=ls()) # clean workspace
#-----------------------------------------------------------------------------------------------------#
#		Block 01		(Install &) Load packages
#-----------------------------------------------------------------------------------------------------#
# Install packages if needed and load, or just load packages
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager", ask = F)
# Insert all packages in requiredpackages
requiredpackages <-
c("GRENITS",
"igraph",
"corrr",
"GENIE3",
"parmigene",
"RCy3")
for (i in requiredpackages) {
if (!requireNamespace(i, quietly = TRUE))
BiocManager::install(i, ask = F, dependencies = TRUE)
require(as.character(i), character.only = TRUE)
print(i)
}
#-----------------------------------------------------------------------------------------------------#
#		Block 02a		GENERAL Settings
#-----------------------------------------------------------------------------------------------------#
options(stringsAsFactors 	= F)
motifsize 					= 3
#-----------------------------------------------------------------------------------------------------#
#		Block 02b		INPUT Settings
#-----------------------------------------------------------------------------------------------------#
DataFolderLocation 		= "/Github/MSB1014-Network_Biology-Project/Project/Notebook/" 	# Must be in format "/location...DatalocationFolder/"
#-----------------------------------------------------------------------------------------------------#
#		Block 03		Prepare folders and load data
#-----------------------------------------------------------------------------------------------------#
# Data_dir should contain the data file!
if(Sys.info()[6]=="RR"){
data_dir <- paste("D:",DataFolderLocation,sep="")  # Rick's link (laptop)
}else if(Sys.info()[6]=="Admin"){
data_dir <- paste("D:/Games",DataFolderLocation,sep="")  # Rick's other link (desktop)
}
# Get folder and move to one level above, then make new folder containing timestamp
setwd(data_dir)
#-----------------------------------------------------------------------------------------------------#
#							Load data
#-----------------------------------------------------------------------------------------------------#
data <- read.delim("insilico-data.txt", row.names=1)
set.seed(1) # for reproducibility of results
#-----------------------------------------------------------------------------------------------------#
# 										Make results folder
#-----------------------------------------------------------------------------------------------------#
# Make the "Results timestamp" folder
setwd('..')
root_dir <- getwd()
results_dir <- paste(root_dir,"/Results ",gsub(format(Sys.time(), "%x_%H.%M.%S"), pattern = "/",replacement = "-"),sep="")
dir.create(file.path(results_dir))
setwd(results_dir)
#-----------------------------------------------------------------------------------------------------#
#							True network definition and analalysis
#-----------------------------------------------------------------------------------------------------#
graph.True = graph_from_literal(ErbB3.P--+Ras.GTP,ErbB3.P--+Gab1.P,ErbB3.P--+ErbB1.P,ErbB3.P--+PIP2,ErbB3.P--+SHC.P,
ErbB3.P--+ErbB2.P,ErbB3.P--+PIP3,ERK.P.P--+ErbB3.P,ERK.P.P--+Gab1.P,ERK.P.P--+SOS.P,ERK.P.P--+ErbB1.P,ERK.P.P--+ErbB2.P,
ERK.P.P--+ERK.P,Ras.GTP--+ErbB3.P,Ras.GTP--+ErbB1.P,Ras.GTP--+ErbB4.P,Ras.GTP--+SHC.P,Ras.GTP--+RAF.P,Ras.GTP--+ErbB2.P,
MEK.P.P--+ERK.P.P,MEK.P.P--+MEK.P,MEK.P.P--+ERK.P,Gab1.P--+ErbB3.P,Gab1.P--+Ras.GTP,Gab1.P--+ErbB1.P,Gab1.P--+ErbB4.P,
Gab1.P--+PIP2,Gab1.P--+ErbB2.P,Gab1.P--+PIP3,ErbB1.P--+ErbB3.P,ErbB1.P--+Ras.GTP,ErbB1.P--+Gab1.P,ErbB1.P--+SOS.P,
ErbB1.P--+ErbB4.P,ErbB1.P--+PIP2,ErbB1.P--+SHC.P,ErbB1.P--+ErbB2.P,ErbB1.P--+PIP3,AKT.P--+AKT.P.P,ErbB4.P--+Ras.GTP,
ErbB4.P--+Gab1.P,ErbB4.P--+ErbB1.P,ErbB4.P--+PIP2,ErbB4.P--+SHC.P,ErbB4.P--+ErbB2.P,ErbB4.P--+PIP3,PIP2--+Gab1.P,
PIP2--+ErbB4.P,PIP2--+ErbB2.P,PIP2--+PIP3,MEK.P--+MEK.P.P,SHC.P--+ErbB3.P,SHC.P--+Ras.GTP,SHC.P--+SOS.P,SHC.P--+ErbB1.P,
SHC.P--+ErbB4.P,SHC.P--+ErbB2.P,RAF.P--+Ras.GTP,RAF.P--+MEK.P.P,RAF.P--+MEK.P,ErbB2.P--+ErbB3.P,ErbB2.P--+Ras.GTP,
ErbB2.P--+Gab1.P,ErbB2.P--+ErbB1.P,ErbB2.P--+ErbB4.P,ErbB2.P--+PIP2,ErbB2.P--+SHC.P,ErbB2.P--+PIP3,ERK.P--+ERK.P.P,
PIP3--+AKT.P,PIP3--+PIP2,PIP3--+AKT.P.P,AKT.P.P--+AKT.P,AKT.P.P--+RAF.P,unconnected=dummy1,dummy2,dummy3)
#nodes:
V(graph.True)
length(V(graph.True))
#links:
E(graph.True)
length(E(graph.True))
plot(graph.True)
plot(graph.True)
res.cor <- correlate(t(data), diagonal = 0)
row.names(res.cor) <- res.cor$rowname
res.cor[1] <- NULL
res.cor.filtered <- res.cor
res.cor.filtered[res.cor.filtered < 0.3] <- 0
graph.Cor <- igraph::graph_from_adjacency_matrix(as.matrix(res.cor.filtered), weighted=TRUE)
plot(graph.Cor)
fGetMotifsFromGraph = function(graph.name, motifsize = 3, directed=TRUE, amountRandomNets = 1000, betaFactor = 1.3, HardTH = 3,runCytoscape=FALSE){
# motifsize = 3 # motif size: 3 or 4
# directed = TRUE # directed
# amountRandomNets = 1000 # amount of random nets
# betaFactor = 1.3 # The probability distribution in 'amountRandomNets' networks is risen to the power of beta, to cut on motifs
# HardTH = 3 # minimum amount of ocurrences
# runCytoscape = T/F # True for network generation in cytoscape
# create folder
root_dir <- getwd()
results_dir <- paste(root_dir,"/",graph.name,sep="")
dir.create(file.path(results_dir))
setwd(results_dir)
graph = get(graph.name)
graphInfer = graph # used later
#if(exists("randomNetMotifsTotal")){rm(randomNetMotifsTotal)}
#if(exists("endresult")){rm("endresult")}
# Find network motifs in the graph "graph":
mygraphmotifs <- graph.motifs(graph, motifsize)
# Find which motifs occur:
for (i in 1:length(mygraphmotifs)){
if(is.na(mygraphmotifs[i])){next}
motif <- mygraphmotifs[i]
if (motif > 0){ # There are some occurrences of this motif
# print(i)
# Find out what the motif looks like:
motifgraph <- graph.isocreate(size=motifsize, number=i-1, directed=directed)
#edges <- E(motifgraph)
png(file = paste("Motif ", i-1, ".png", sep = ""),
width = 2400/2, height = 2400/2, pointsize=25)
plot(motifgraph)
text(-0.5,-1.2,paste("This motif(",i-1,") occurs ",motif," times:",sep=""))
dev.off()
print(paste("Motif",i-1,"occurs",motif,"times."))
#cat(edges)
}
}
print(mygraphmotifs)
mygraphmotifs[is.na(mygraphmotifs)]=0
# start statistical testing
graph = delete.vertices(graph, degree(graph)==0)
meanInDegree = mean(degree(graph,mode = "in"))
meanOutDegree = mean(degree(graph,mode = "out"))
# start random net generation; create distribution
for(p in 1:amountRandomNets){
#g <- sample_pa(n=length(V(graph)),m=round(length(E(graph))/length(V(graph))),directed = directed)
g <- random.graph.game(n = length(V(graph)),p.or.m =length(V(graph)),directed = T,type = "gnm")
randomNetMotifs = graph.motifs(g, motifsize)
randomNetMotifs[is.na(randomNetMotifs)]=0
if(!exists("randomNetMotifsTotal")){
randomNetMotifsTotal = randomNetMotifs
}else{
randomNetMotifsTotal = randomNetMotifsTotal + randomNetMotifs
}
}
randomNetMotifsTotal = randomNetMotifsTotal/amountRandomNets
#####################
# Which occured more than random:
impMotifIndex = which(mygraphmotifs>(randomNetMotifsTotal^betaFactor)&mygraphmotifs>HardTH)-1 #@RRR include TH morethan 3
if(length(impMotifIndex) == 0 ){
print("no significant motifs")
}else{
print(impMotifIndex)
# get locations
for(i in 1:length(impMotifIndex)){
pattern = graph.isocreate(size=motifsize, number=impMotifIndex[i], directed=directed)
iso <- subgraph_isomorphisms(pattern, graph)      # takes a while
motifsZ <- lapply(iso, function (x) { induced_subgraph(graph, x) })
for( p in 2:length(motifsZ)){
if(!exists("a")){a=motifsZ[[1]]}else{a=new_g}
b=motifsZ[[p]]
#V(a)$name <- V(a)$label
#V(b)$name <- V(b)$label
attrs <- rbind(as_data_frame(a, "vertices"), as_data_frame(b, "vertices")) %>% unique()
el <- rbind(as_data_frame(a), as_data_frame(b))
#@RRR check if this really is one motif
new_g <- graph_from_data_frame(el, directed = TRUE, vertices = attrs)
}
rm(a)
rm(b)
png(file = paste("Complex net from motif ", impMotifIndex[i], ".png", sep = ""),
width = 2400/2, height = 2400/2, pointsize=25)
plot(new_g)
text(-0.5,-1.2,paste("Assembled network contains ",length(motifsZ)," motifs(",impMotifIndex[i],").",sep=""))
title("Complex")
dev.off()
png(file = paste("Simple net from motif ", impMotifIndex[i], ".png", sep = ""),
width = 2400/2, height = 2400/2, pointsize=25)
plot(simplify(new_g))
text(-0.5,-1.2,paste("Assembled network contains ",length(motifsZ)," motifs(",impMotifIndex[i],").",sep=""))
title("Simplified")
dev.off()
# check below!...
if(!exists("endresult")){a=new_g}else{a=endresult}
b=new_g
#V(a)$name <- V(a)$label
#V(b)$name <- V(b)$label
attrs <- rbind(as_data_frame(a, "vertices"), as_data_frame(b, "vertices")) %>% unique()
el <- rbind(as_data_frame(a), as_data_frame(b))
endresult <- graph_from_data_frame(el, directed = TRUE, vertices = attrs)
rm(a)
rm(b)
}
png(file = paste("Endresult complex net.png", sep = ""),
width = 2400, height = 2400, pointsize=25)
plot((endresult))
#text(-0.5,-1.2,paste("Assembled network contains ",length(motifsZ)," motifs(",impMotifIndex[i],").",sep=""))
#title("Simplified")
dev.off()
png(file = paste("Endresult simple net.png", sep = ""),
width = 2400, height = 2400, pointsize=25)
plot(simplify(endresult))
#text(-0.5,-1.2,paste("Assembled network contains ",length(motifsZ)," motifs(",impMotifIndex[i],").",sep=""))
#title("Simplified")
dev.off()
# calculate difference and check the overlap
## NO motif filter
# missed this amount of edges:
NoE = E(graphInfer)%in%E(graph.True)
print(paste(sum(NoE),"/",length(NoE)," of total ",length(E(graph.True))," edges correct (inferred net)",sep=""))
# missed this amount of nodes:
NoN = V(graphInfer)%in%V(graph.True)
print(paste(sum(NoN),"/",length(NoN)," of total ",length(V(graph.True))," nodes correct (inferred net)",sep=""))
## motif filter
# missed this amount of edges:
YesE = E(simplify(endresult))%in%E(graph.True)
print(paste(sum(YesE),"/",length(YesE)," of total ",length(E(graph.True))," edges correct (motif filter)",sep=""))
# missed this amount of nodes:
YesN = V(simplify(endresult))%in%V(graph.True)
print(paste(sum(YesN),"/",length(YesN)," of total ",length(V(graph.True))," nodes correct (motif filter)",sep=""))
# ...to this!
# Cytoscape!
if(runCytoscape==T){
createNetworkFromIgraph(graphInfer, title="Inferred_network",collection=graph.name)
copyVisualStyle("default","MyStyle01")
setVisualStyle("MyStyle01")
setEdgeTargetArrowShapeDefault("Arrow", style.name = "MyStyle01")
layoutNetwork(layout.name = "cose")
createNetworkFromIgraph(simplify(endresult), title="Inferred_Motif_network",collection=graph.name)
setVisualStyle("MyStyle01")
layoutNetwork(layout.name = "cose")
createNetworkFromIgraph(graph.True, title="True_network",collection=graph.name)
setVisualStyle("MyStyle01")
layoutNetwork(layout.name = "cose")
}
rm(endresult)
}
setwd('..')
}
fGetMotifsFromGraph("graph.Cor",motifsize)
